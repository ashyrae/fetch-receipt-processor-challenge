//*
// This project uses Google's Protocol Buffers ('Protobuf'). (GitHub Repo: https://github.com/protocolbuffers/protobuf)
//
// Protobuf is a language-and-platform neutral way of serializing structured data,
// supporting language bindings and a canonical encoding in JSON.
//
// Read the Protobuf documentation here: (https://protobuf.dev/overview/)

//*
// A Protobuf `syntax` (`proto2` or `proto3`) or `editions` (`2023`) must be the first non-comment line in a `.proto` file.
// A Protobuf `package` must be the next non-comment, non-whitespace line in a `.proto` file.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReceiptService_ProcessReceipt_FullMethodName = "/service.ReceiptService/ProcessReceipt"
	ReceiptService_AwardPoints_FullMethodName    = "/service.ReceiptService/AwardPoints"
)

// ReceiptServiceClient is the client API for ReceiptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ReceiptService is a gRPC service that provides HTTP routes for the processing of receipts & the awarding of points.
type ReceiptServiceClient interface {
	// ProcessReceipt receives a ProcessRequest containing a Receipt,
	// and returns a ProcessResponse containing a unique identifying string representing a processed receipt.
	ProcessReceipt(ctx context.Context, in *ProcessReceiptRequest, opts ...grpc.CallOption) (*ProcessReceiptResponse, error)
	// AwardPoints receives an AwardPointsRequest containing a unique identifying string representing a processed receipt,
	// and returns an AwardPointsResponse containing the associated points being awarded.
	AwardPoints(ctx context.Context, in *AwardPointsRequest, opts ...grpc.CallOption) (*AwardPointsResponse, error)
}

type receiptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiptServiceClient(cc grpc.ClientConnInterface) ReceiptServiceClient {
	return &receiptServiceClient{cc}
}

func (c *receiptServiceClient) ProcessReceipt(ctx context.Context, in *ProcessReceiptRequest, opts ...grpc.CallOption) (*ProcessReceiptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessReceiptResponse)
	err := c.cc.Invoke(ctx, ReceiptService_ProcessReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiptServiceClient) AwardPoints(ctx context.Context, in *AwardPointsRequest, opts ...grpc.CallOption) (*AwardPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AwardPointsResponse)
	err := c.cc.Invoke(ctx, ReceiptService_AwardPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiptServiceServer is the server API for ReceiptService service.
// All implementations must embed UnimplementedReceiptServiceServer
// for forward compatibility.
//
// ReceiptService is a gRPC service that provides HTTP routes for the processing of receipts & the awarding of points.
type ReceiptServiceServer interface {
	// ProcessReceipt receives a ProcessRequest containing a Receipt,
	// and returns a ProcessResponse containing a unique identifying string representing a processed receipt.
	ProcessReceipt(context.Context, *ProcessReceiptRequest) (*ProcessReceiptResponse, error)
	// AwardPoints receives an AwardPointsRequest containing a unique identifying string representing a processed receipt,
	// and returns an AwardPointsResponse containing the associated points being awarded.
	AwardPoints(context.Context, *AwardPointsRequest) (*AwardPointsResponse, error)
	mustEmbedUnimplementedReceiptServiceServer()
}

// UnimplementedReceiptServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceiptServiceServer struct{}

func (UnimplementedReceiptServiceServer) ProcessReceipt(context.Context, *ProcessReceiptRequest) (*ProcessReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessReceipt not implemented")
}
func (UnimplementedReceiptServiceServer) AwardPoints(context.Context, *AwardPointsRequest) (*AwardPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AwardPoints not implemented")
}
func (UnimplementedReceiptServiceServer) mustEmbedUnimplementedReceiptServiceServer() {}
func (UnimplementedReceiptServiceServer) testEmbeddedByValue()                        {}

// UnsafeReceiptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiptServiceServer will
// result in compilation errors.
type UnsafeReceiptServiceServer interface {
	mustEmbedUnimplementedReceiptServiceServer()
}

func RegisterReceiptServiceServer(s grpc.ServiceRegistrar, srv ReceiptServiceServer) {
	// If the following call pancis, it indicates UnimplementedReceiptServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReceiptService_ServiceDesc, srv)
}

func _ReceiptService_ProcessReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).ProcessReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_ProcessReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).ProcessReceipt(ctx, req.(*ProcessReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiptService_AwardPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AwardPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiptServiceServer).AwardPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiptService_AwardPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiptServiceServer).AwardPoints(ctx, req.(*AwardPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiptService_ServiceDesc is the grpc.ServiceDesc for ReceiptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ReceiptService",
	HandlerType: (*ReceiptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessReceipt",
			Handler:    _ReceiptService_ProcessReceipt_Handler,
		},
		{
			MethodName: "AwardPoints",
			Handler:    _ReceiptService_AwardPoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
